//
//  Information retrieval course
//  First version: Johan Boye 2016
//
// In this file you can put your regular expressions
// for matching non-standard words (like mail addresses).
//
// As you have probably already understood, lines beginning
// with "//" are comments.
//
// The regular expression below is an example of a useful
// pattern. You can keep it, modify it, or remove it, as you
// wish.


// website: protocol://domain
[A-Za-z0-9.]+:\/\/[A-Za-z0-9.\/\?\+&=_\-,#%:@!]+

// email: someone@domain.com
[A-Za-z0-9._]+@[A-Za-z0-9.\-]+

// phone number: +46-222222
\+^[0-9]{1,2}(-)?\d+

// date: year-month-day, year/month/day, year 1999 or 99
(?:\d{4}|\d{2})[-\/]\d{2}[-\/]\d{2}

// ipv4 address: 192.168.1.1
\d{1,3}\.\d{1,3}\.\d{1,3}\.d{1,3}

// associative: someword's
[A-Za-z]+'[A-Za-z]+

// url / filename: hello.me.com, hello.me/myfile.txt, myfile.txt
[A-Za-z0-9\.\-_]+(\/[A-Za-z0-9.\-]+)?

// time: hour:minute (and optionally :second)
\d{2}:\d{2}(:\d{2})?

// digit separators: 4.2, 24/7
\d+[\/,\.]\d+

// dashes
[A-Za-z0-9.]+-[A-Za-z0-9.]+


// abbrevations: e.g.
// [\w\.]\.



// The patterns will be tried from top to bottom, so it is a
// good idea to put more specific patterns above more general
// patterns.


