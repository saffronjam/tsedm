model Festival

global {
	int numberOfPeople <- 10;
	int numberOfStores <- 4;
	int distanceThreshold <- 2;
	
	init {
		create Person number:numberOfPeople;
		
		//{
		//	position <- {rnd(-100, 100), rnd(-100, 100)};
		//}
				
		create Store number:numberOfStores;
		create InfoCenter;
				
		loop counter from: 1 to: numberOfPeople {
        	Person person <- Person[counter - 1];
        	person <- person.setName(counter);
        }
        		
		loop counter from: 1 to: numberOfStores {
        	Store store <- Store[counter - 1];
			write "store " + store;
        	InfoCenter infoCenter <- InfoCenter;
        	infoCenter <- infoCenter.setName(3);
        	//infoCenter <- infoCenter.addPoint(store.location);
        	infoCenter <- infoCenter.setName(2);
        	//infoCenter <- infoCenter.addStore(store);
        	infoCenter <- infoCenter.setName(1);
        	
        	
        	store <- store.setName(counter);

        	bool type <- flip(0.5);
        	store <- store.setType(type);
        }
	}
}


species Person skills:[moving]
{
	int hunger <- 0;
	int thirst <- 0;
	point targetPoint <- nil;
	string personName <- "Undefined";
	
	action setName(int num) {
		personName <- "Person " + num;
	}
	
	aspect base {
		rgb agentColor <- rgb("lightgray");
		
		if (hunger > 100 and thirst > 100) {
			agentColor <- rgb("purple");
		} else if (thirst > 100) {
			agentColor <- rgb("blue");
		} else if (hunger > 100) {
			agentColor <- rgb("red");
		} 
				
		draw circle(1) color: agentColor;
	}
	
	reflex lookForInfoCenter when: (hunger > 100 or thirst > 100) and targetPoint = nil 
	{
		write personName + " going to info center";
		targetPoint <- {0,0}; // Go to info center
	}
	
	reflex beIdle when: targetPoint = nil
	{ 
		thirst <- thirst + rnd(1,5);
		hunger <- hunger + rnd(1,3);
		do wander;
	}
	
	reflex moveToTarget when: targetPoint != nil
	{
		do goto target:targetPoint;
	}
	
	reflex getInfo when: targetPoint != nil 
		and location distance_to(targetPoint) < 2 
		and !empty(InfoCenter at_distance distanceThreshold) {
		ask InfoCenter at_distance distanceThreshold {
			write myself.personName + " is at info center";
			if(myself.thirst > 100){
				//myself.targetPoint <- self.findBar();	
				write myself.personName + " going to bar at " + myself.targetPoint;
			}
			else if(myself.hunger > 100){
				//myself.targetPoint <- self.findRestaurant();
				write myself.personName + " going to restaurant at " + myself.targetPoint;
			}
			else {
				myself.targetPoint <- nil;
			}
		}
	}
	
	reflex enterStore when: targetPoint != nil 
		and location distance_to(targetPoint) < 2 
		and !empty(Store at_distance distanceThreshold) {
		ask Store at_distance distanceThreshold {
			if (self.hasFood){
				myself.hunger <- 0;
				write myself.personName + " eating at " + self.storeName;
			} else {
				myself.thirst <- 0;
				write myself.personName + " drinking at " + self.storeName;
			}
		}
	}
}

species Store {
	bool hasFood <- false;
	string storeName <- "Undefined";
	
	action setName(int num) {
		write "message " + num;
		storeName <- "Store " + num;
	}
	
	action setType(bool type) {
		storeName <- type;
	}
	
	aspect base {
		rgb agentColor <- rgb("lightgray");
		
		if (hasFood){
			agentColor <- rgb("red");
		} else {
			agentColor <- rgb("blue");
		}
		
		draw square(2) color: agentColor;
	}
}

species InfoCenter{
	action setName(int num){
		write "infocenter "+ num;
	}
}

species InfoCenter2 {
	list<Store> restaurants <- [];
	list<Store> bars <- [];
	list<point> pRestaurants <- [];
	init{
		location <- {0,0};
	}
	
	action addStore(Store store) {
		write "adding " + store + " current state is restaurants " + restaurants + " bars " + bars;	
		if(store.hasFood){
			restaurants <- restaurants + store;
		} else {
			bars <- bars + store;
		}
	}
	
	action addPoint(point p){
		write "adding point "+ p;
		pRestaurants <- pRestaurants + p;
	}
	
	action setName(int s){
		write "message " + s;
	}
	
	point findBar{
		
		write "restaurants " + restaurants + " bars " + bars;	
		return (1 among bars)[0].location;
	}
	
	point findRestaurant{
		
		write "restaurants " + restaurants + " bars " + bars;	
		return (1 among restaurants)[0].location;
	}
	
	aspect base {
		rgb agentColor <- rgb("black");
		draw triangle(2) color: agentColor;
	}
}

experiment festival type:gui {
	output {
		display myDisplay {
			species Person aspect:base;
			species Store aspect:base;
			species InfoCenter aspect:base;
		}
	}
}